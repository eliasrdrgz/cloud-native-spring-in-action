plugins {
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'java'
	id 'org.cyclonedx.bom' version '1.8.2'
    id("org.openrewrite.rewrite") version("6.16.0")
}

rewrite {
    activeRecipe("org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_3")
	activeRecipe("org.openrewrite.java.migrate.UpgradeToJava21")
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

description = 'Provides functionality for purchasing books.'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('otelVersion', "1.33.3")
	set('springCloudVersion', "2021.0.9")
	set('testcontainersVersion', "1.19.8")
	set('testKeycloakVersion', "3.3.1")
}

dependencies {
    rewrite("org.openrewrite.recipe:rewrite-spring:5.12.0")

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.retry:spring-retry'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	runtimeOnly 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.springframework:spring-jdbc'

	// Only on Apple Silicon. Why it's necessary: https://github.com/netty/netty/issues/11020
	// runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.101.Final:osx-aarch_64'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation "jakarta.validation:jakarta.validation-api:3.1.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "org.mockito:mockito-junit-jupiter:3.12.4"
    testImplementation 'com.squareup.okhttp3:mockwebserver'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
	testImplementation("org.springframework.cloud:spring-cloud-stream") {
		artifact {
			name = "spring-cloud-stream"
			extension = "jar"
			type ="test-jar"
			classifier = "test-binder"
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
	buildInfo()
}

bootBuildImage {
	builder = "docker.io/paketobuildpacks/builder-jammy-base"
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
