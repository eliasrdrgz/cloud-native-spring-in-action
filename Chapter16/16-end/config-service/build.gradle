plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.graalvm.buildtools.native' version '0.10.2'
	id 'org.cyclonedx.bom' version '1.8.2'
    id("org.openrewrite.rewrite") version("6.16.0")
}

rewrite {
    activeRecipe("org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_3")
	activeRecipe("org.openrewrite.java.migrate.UpgradeToJava21")
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

description = 'Provides functionality for centralizing the application configuration.'

repositories {
	mavenCentral()
}

ext {
	set('otelVersion', "1.33.3")
	set('springCloudVersion', "2021.0.9")
}

dependencies {
    rewrite("org.openrewrite.recipe:rewrite-spring:5.12.0")

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-config-server'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
	buildInfo()
}

bootBuildImage {
	builder = "docker.io/paketobuildpacks/builder-jammy-base"
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
